<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-4.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

    <context:component-scan base-package="base" />
    <context:spring-configured />
    <context:annotation-config />

    <!-- Let spring scan for Transactional components (ex: @Transactional) -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- Define datasource bean -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
        <property name="driverClassName" value="org.postgresql.Driver" />
        <property name="url"
                  value="jdbc:postgresql://localhost:5432/SpringApp" />
        <property name="username" value="postgres" />
        <property name="password" value="parola" />
    </bean>
    <!-- Define the session factory -->
    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="packagesToScan" value="base.beans.entities" />
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">validate</prop>
            </props>
        </property>
    </bean>
    <!-- Define transaction manager -->
    <bean id="transactionManager"
          class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>

    <!-- the transactional advice (what 'happens'; see the <aop:advisor/> bean below) -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- the transactional semantics... -->
        <tx:attributes>
            <!-- all methods starting with 'get' are read-only -->
            <tx:method name="get*" read-only="true"/>
            <tx:method name="find*" read-only="true"/>
            <!-- other methods use the default transaction settings (see below) -->
            <tx:method name="*" propagation="REQUIRED" />
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="transactionAnnotatedClass" expression="@within(org.springframework.transaction.annotation.Transactional)"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="transactionAnnotatedClass"/>
    </aop:config>

    <!--
    Important for @Secured annotations to work.
    Here we enable all three of them - @Secured, @PreAuthorize and @RolesAllowed. You may choose what you use.
    Check MainRestController for examples.
    -->
    <!--<security:global-method-security secured-annotations="enabled" pre-post-annotations="enabled" jsr250-annotations="enabled"/>-->

    <import resource="rest-servlet.xml"/>
    <import resource="spring-ws-servlet.xml"/>
    <import resource="web-servlet.xml"/>
    <import resource="spring-security.xml"/>
</beans>